const globalsJS = {
  qlik: null,
  resize: null,
  selState: null
};

/* var appId= "93026550-480f-4bef-ad64-14aa46bc4ae2"; */

let capabilityApisPromise;

const loadCapabilityApis = async (config) => {
  try {
    if (capabilityApisPromise) {
      await capabilityApisPromise;
      return;
    }
    const capabilityApisJS = document.createElement('script');
    const prefix = (config.prefix !== '') ? `/${config.prefix}` : '';
    capabilityApisJS.src = `${(config.isSecure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/assets/external/requirejs/require.js`;
    document.head.appendChild(capabilityApisJS);
    capabilityApisJS.loaded = new Promise((resolve) => {
      capabilityApisJS.onload = () => { resolve(); };
    });
    const capabilityApisCSS = document.createElement('link');
    capabilityApisCSS.href = `${(config.isSecure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/autogenerated/qlik-styles.css`;
    capabilityApisCSS.type = 'text/css';
    capabilityApisCSS.rel = 'stylesheet';
    document.head.appendChild(capabilityApisCSS);
    capabilityApisCSS.loaded = new Promise((resolve) => {
      capabilityApisCSS.onload = () => { resolve(); };
    });

    capabilityApisPromise = Promise.all([capabilityApisJS.loaded, capabilityApisCSS.loaded]);

    await capabilityApisPromise;
  } catch (error) {
    throw new Error(error);
  }
};


const qApp = async (config, globals, appId) => {
  try {
    await loadCapabilityApis(config);
    const prefix = (config.prefix !== '') ? `/${config.prefix}/` : '/';
    window.require.config({
      baseUrl: `${(config.isSecure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources`,
      paths: {
        qlik: `${(config.isSecure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources/js/qlik`,
      },
      //webIntegrationId: config.webIntegrationId,
      config: {
        text: {
          useXhr() {
            return true;
          },
        },
      },
    });
    return new Promise((resolve) => {
      if (globals.qlik) {
        const app = globals.qlik.openApp(appId,  {host: config.host, prefix: prefix, port: config.port, isSecure: config.isSecure});
        // apply theme set in QSE
        app.theme.get().then((theme) => {
          theme.apply();
        });
        resolve(app);
      } else {
        window.require(['js/qlik'], (q) => {
          globalsJS.qlik = q;
          globalsJS.resize = () => {
            q.resize();
          }; 

          q.setOnError( function ( error ) {
            console.log(error);
          });
        //{host: "63.35.31.78",prefix: "/",port: 80,isSecure: false } reload
          const app = q.openApp(appId,  {id: appId, host: config.host, prefix: prefix, port: config.port, isSecure: config.isSecure});

          // create an object
          globalsJS.selState = app.selectionState();
          var listener = function() {
            //alert('Back count:' + globalsJS.selState.backCount);
            //console.log("selecciones int", globalsJS.selState);
            //unregister the listener when no longer notification is needed.
             //globalsJS.selState.OnData.unbind( listener );
          };
          //bind the listener
          globalsJS.selState.OnData.bind( listener );


          resolve(app, q);

          app.on("error", function(error) {
            console.log(error);
          });
          app.on("closed", function(error) {
            console.log(error);
          });
          app.on("warning", function ( warning ) {
            console.log("warning listener called for app", warning);
          } );

        });

      }
      
    });
  } catch (error) {
    throw new Error(error);
  }
};

//qApp();
const prueba={
  qApp: qApp,
  q: globalsJS
};
export default prueba;